1. To use the iapingress-controller, create an IapIngress resouces like the example below:

kubectl create -f - <<EOF
apiVersion: ctl.isla.solutions/v1
kind: IapIngress
metadata:
  name: iap-ingress
  annotations:
    certmanager.k8s.io/issuer: "letsencrypt-prod"
    certmanager.k8s.io/acme-challenge-type: "http01"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: "gce"
spec:
  iapProjectAuthz:
    role: "roles/iap.httpsResourceAccessor"
    members:
    - "user:MY_ACCOUNT"
  tls:
  - secretName: "iap-ingress-tls"
    hosts:
    - service1.endpoints.MY_PROJECT.cloud.goog
    - service2.mydomain
  rules:
  - host: service1.MY_PROJECT.cloud.goog
    http:
      paths:
      - path:
        backend:
          iap:
            enabled: true
            createESP: true
          serviceName: service1
          servicePort: 80
  - host: service2.mydomain
    http:
      paths:
      - path:
        backend:
          iap:
            enabled: true
            createESP: true
          serviceName: service2
          servicePort: 80
EOF

  a. Add authorized users to the `iapProjectAuthz.members` list.
  b. If you are using the provided `*.cloud.goog` DNS records, set the values of the services entries appropriately and replace `MY_PROJECT` with the project id of your Google Cloud Platform project.
  c. If you are not using not the provided `*.cloud.goog` record) then create a CNAME record that points to the `SERVICE.endpoints.MY_PROJECT.cloud.goog` record.
  d. Enable IAP for each rule http path by setting `path.backend.iap.enabled` to `true`.

3. Add each of your endpoints to the authorized redirect uris for your OAuth 2.0 Client ID config:

  Open the OAuth 2.0 Client ID config for your credential: https://console.cloud.google.com/apis/credentials

  Add redirect URIs for each of your hosts in the form of:

  https://HOSTNAME/_gcp_gatekeeper/authenticate

  You can also run `kubectl describe iaping iap-ingress` to see the redirect uris.

4. Example kubectl commands:

  kubectl get iaping

  kubectl describe iaping iap-ingress

  kubectl delete iaping iap-ingress

